/*
 * This file is generated by jOOQ.
 */
package com.github.krystiankowalik.jooqexample.domain.tables;


import com.github.krystiankowalik.jooqexample.domain.Indexes;
import com.github.krystiankowalik.jooqexample.domain.Keys;
import com.github.krystiankowalik.jooqexample.domain.Testdb;
import com.github.krystiankowalik.jooqexample.domain.tables.records.PostsRecord;

import java.sql.Timestamp;
import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class Posts extends TableImpl<PostsRecord> {

    private static final long serialVersionUID = -224606967;

    /**
     * The reference instance of <code>testdb.POSTS</code>
     */
    public static final Posts POSTS = new Posts();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<PostsRecord> getRecordType() {
        return PostsRecord.class;
    }

    /**
     * The column <code>testdb.POSTS.ID</code>.
     */
    public final TableField<PostsRecord, Integer> ID = createField("ID", org.jooq.impl.SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>testdb.POSTS.TITLE</code>.
     */
    public final TableField<PostsRecord, String> TITLE = createField("TITLE", org.jooq.impl.SQLDataType.VARCHAR(200).nullable(false), this, "");

    /**
     * The column <code>testdb.POSTS.CONTENT</code>.
     */
    public final TableField<PostsRecord, String> CONTENT = createField("CONTENT", org.jooq.impl.SQLDataType.CLOB, this, "");

    /**
     * The column <code>testdb.POSTS.CREATED_ON</code>.
     */
    public final TableField<PostsRecord, Timestamp> CREATED_ON = createField("CREATED_ON", org.jooq.impl.SQLDataType.TIMESTAMP, this, "");

    /**
     * Create a <code>testdb.POSTS</code> table reference
     */
    public Posts() {
        this(DSL.name("POSTS"), null);
    }

    /**
     * Create an aliased <code>testdb.POSTS</code> table reference
     */
    public Posts(String alias) {
        this(DSL.name(alias), POSTS);
    }

    /**
     * Create an aliased <code>testdb.POSTS</code> table reference
     */
    public Posts(Name alias) {
        this(alias, POSTS);
    }

    private Posts(Name alias, Table<PostsRecord> aliased) {
        this(alias, aliased, null);
    }

    private Posts(Name alias, Table<PostsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> Posts(Table<O> child, ForeignKey<O, PostsRecord> key) {
        super(child, key, POSTS);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Testdb.TESTDB;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.POSTS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<PostsRecord, Integer> getIdentity() {
        return Keys.IDENTITY_POSTS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<PostsRecord> getPrimaryKey() {
        return Keys.KEY_POSTS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<PostsRecord>> getKeys() {
        return Arrays.<UniqueKey<PostsRecord>>asList(Keys.KEY_POSTS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Posts as(String alias) {
        return new Posts(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Posts as(Name alias) {
        return new Posts(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public Posts rename(String name) {
        return new Posts(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Posts rename(Name name) {
        return new Posts(name, null);
    }
}
